syntax = "proto3";

package system.admin.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/rpc/status.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/Joshua-FeatureFlag/proto/gen/go/system/admin/v1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "FeatureFlag";
    version: "1.0";
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        name: "api_key";
        in: IN_HEADER;
      }
    }
    security: {
      key: "OAuth2";
      value: {
        type: TYPE_OAUTH2;
        flow: FLOW_ACCESS_CODE;
        authorization_url: "https://example.com/oauth/authorize";
        token_url: "https://example.com/oauth/token";
        scopes: {
          scope: {
            key: "read";
            value: "Grants read access";
          }
          scope: {
            key: "write";
            value: "Grants write access";
          }
          scope: {
            key: "admin";
            value: "Grants read and write access to administrative information";
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "BearerAuth";
      value: {};
    }
  }
  security: {
    security_requirement: {
      key: "OAuth2";
      value: {
        scope: "read";
        scope: "write";
      }
    }
    security_requirement: {
      key: "BearerAuth";
      value: {};
    }
  }
  responses: {
    key: "403";
    value: {description: "Returned when the user does not have permission to access the resource."}
  }
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {type: STRING}
      }
    }
  }
};


message User {
  int64 id = 1;
  string name = 2;
  int64 organization_id = 4;
}

message Organization {
  int64 id = 1;
  string name = 2;
  repeated User users = 3;
}

service UserService {
  rpc CreateUser (User) returns (User){
        option (google.api.http) = {
            post: "/v1/user/create"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          security: {
            security_requirement: {
                key: "BearerAuth";
                value: {}
            }
          }
        };
  };
  rpc GetUser (User) returns (User){
        option (google.api.http) = {
            get: "/v1/user/{id}"
        };
  };
  rpc UpdateUser (User) returns (User){
        option (google.api.http) = {
            put: "/v1/user/update"
            body: "*"
        };
  };
  rpc DeleteUser (User) returns (User){
        option (google.api.http) = {
            delete: "/v1/user/delete/{id}"
        };
  };
}

service OrganizationService {
  rpc CreateOrganization (Organization) returns (Organization){
        option (google.api.http) = {
            post: "/v1/organization/create"
            body: "*"
        };
  };
  rpc GetOrganization (Organization) returns (Organization){
        option (google.api.http) = {
            get: "/v1/organization/get/{id}"
        };
  };
  rpc UpdateOrganization (Organization) returns (Organization){
        option (google.api.http) = {
            put: "/v1/organization/update"
            body: "*"
        };
  };
  rpc DeleteOrganization (Organization) returns (Organization){
        option (google.api.http) = {
            delete: "/v1/organization/delete/{id}"
        };
  };
}
