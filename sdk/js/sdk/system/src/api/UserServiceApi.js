/*
 * system.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.33
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RpcStatus', 'model/V1User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RpcStatus'), require('../model/V1User'));
  } else {
    // Browser globals (root is window)
    if (!root.Systemproto) {
      root.Systemproto = {};
    }
    root.Systemproto.UserServiceApi = factory(root.Systemproto.ApiClient, root.Systemproto.RpcStatus, root.Systemproto.V1User);
  }
}(this, function(ApiClient, RpcStatus, V1User) {
  'use strict';

  /**
   * UserService service.
   * @module api/UserServiceApi
   * @version version not set
   */

  /**
   * Constructs a new UserServiceApi. 
   * @alias module:api/UserServiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the userServiceCreateUser operation.
     * @callback module:api/UserServiceApi~userServiceCreateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/V1User} body 
     * @param {module:api/UserServiceApi~userServiceCreateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1User}
     */
    this.userServiceCreateUser = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userServiceCreateUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1User;

      return this.apiClient.callApi(
        '/v1/user/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userServiceDeleteUser operation.
     * @callback module:api/UserServiceApi~userServiceDeleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.organizationId 
     * @param {module:api/UserServiceApi~userServiceDeleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1User}
     */
    this.userServiceDeleteUser = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userServiceDeleteUser");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'name': opts['name'],
        'organizationId': opts['organizationId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1User;

      return this.apiClient.callApi(
        '/v1/user/delete/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userServiceGetUser operation.
     * @callback module:api/UserServiceApi~userServiceGetUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.organizationId 
     * @param {module:api/UserServiceApi~userServiceGetUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1User}
     */
    this.userServiceGetUser = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userServiceGetUser");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'name': opts['name'],
        'organizationId': opts['organizationId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1User;

      return this.apiClient.callApi(
        '/v1/user/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userServiceUpdateUser operation.
     * @callback module:api/UserServiceApi~userServiceUpdateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/V1User} body 
     * @param {module:api/UserServiceApi~userServiceUpdateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1User}
     */
    this.userServiceUpdateUser = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userServiceUpdateUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1User;

      return this.apiClient.callApi(
        '/v1/user/update', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
