// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: featureflag.proto

package featureflag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeatureFlagServiceClient is the client API for FeatureFlagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureFlagServiceClient interface {
	CreateUser(ctx context.Context, in *FeatureFlag, opts ...grpc.CallOption) (*FeatureFlag, error)
	GetUser(ctx context.Context, in *FeatureFlag, opts ...grpc.CallOption) (*FeatureFlag, error)
	UpdateUser(ctx context.Context, in *FeatureFlag, opts ...grpc.CallOption) (*FeatureFlag, error)
	DeleteUser(ctx context.Context, in *FeatureFlag, opts ...grpc.CallOption) (*FeatureFlag, error)
}

type featureFlagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureFlagServiceClient(cc grpc.ClientConnInterface) FeatureFlagServiceClient {
	return &featureFlagServiceClient{cc}
}

func (c *featureFlagServiceClient) CreateUser(ctx context.Context, in *FeatureFlag, opts ...grpc.CallOption) (*FeatureFlag, error) {
	out := new(FeatureFlag)
	err := c.cc.Invoke(ctx, "/featureflag.FeatureFlagService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagServiceClient) GetUser(ctx context.Context, in *FeatureFlag, opts ...grpc.CallOption) (*FeatureFlag, error) {
	out := new(FeatureFlag)
	err := c.cc.Invoke(ctx, "/featureflag.FeatureFlagService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagServiceClient) UpdateUser(ctx context.Context, in *FeatureFlag, opts ...grpc.CallOption) (*FeatureFlag, error) {
	out := new(FeatureFlag)
	err := c.cc.Invoke(ctx, "/featureflag.FeatureFlagService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagServiceClient) DeleteUser(ctx context.Context, in *FeatureFlag, opts ...grpc.CallOption) (*FeatureFlag, error) {
	out := new(FeatureFlag)
	err := c.cc.Invoke(ctx, "/featureflag.FeatureFlagService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureFlagServiceServer is the server API for FeatureFlagService service.
// All implementations must embed UnimplementedFeatureFlagServiceServer
// for forward compatibility
type FeatureFlagServiceServer interface {
	CreateUser(context.Context, *FeatureFlag) (*FeatureFlag, error)
	GetUser(context.Context, *FeatureFlag) (*FeatureFlag, error)
	UpdateUser(context.Context, *FeatureFlag) (*FeatureFlag, error)
	DeleteUser(context.Context, *FeatureFlag) (*FeatureFlag, error)
	mustEmbedUnimplementedFeatureFlagServiceServer()
}

// UnimplementedFeatureFlagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureFlagServiceServer struct {
}

func (UnimplementedFeatureFlagServiceServer) CreateUser(context.Context, *FeatureFlag) (*FeatureFlag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedFeatureFlagServiceServer) GetUser(context.Context, *FeatureFlag) (*FeatureFlag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedFeatureFlagServiceServer) UpdateUser(context.Context, *FeatureFlag) (*FeatureFlag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedFeatureFlagServiceServer) DeleteUser(context.Context, *FeatureFlag) (*FeatureFlag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedFeatureFlagServiceServer) mustEmbedUnimplementedFeatureFlagServiceServer() {}

// UnsafeFeatureFlagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureFlagServiceServer will
// result in compilation errors.
type UnsafeFeatureFlagServiceServer interface {
	mustEmbedUnimplementedFeatureFlagServiceServer()
}

func RegisterFeatureFlagServiceServer(s grpc.ServiceRegistrar, srv FeatureFlagServiceServer) {
	s.RegisterService(&FeatureFlagService_ServiceDesc, srv)
}

func _FeatureFlagService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureFlag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureflag.FeatureFlagService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).CreateUser(ctx, req.(*FeatureFlag))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureFlag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureflag.FeatureFlagService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).GetUser(ctx, req.(*FeatureFlag))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureFlag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureflag.FeatureFlagService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).UpdateUser(ctx, req.(*FeatureFlag))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureFlag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureflag.FeatureFlagService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).DeleteUser(ctx, req.(*FeatureFlag))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureFlagService_ServiceDesc is the grpc.ServiceDesc for FeatureFlagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureFlagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "featureflag.FeatureFlagService",
	HandlerType: (*FeatureFlagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _FeatureFlagService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _FeatureFlagService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _FeatureFlagService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _FeatureFlagService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "featureflag.proto",
}
